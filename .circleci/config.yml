# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:12-browsers

set_env: &set_env
  name: Setup Environment Variables
  command: |
    if [[ $CIRCLE_PULL_REQUEST ]]
    then
      echo 'Fetching Base Commit from GitHub'
      echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      source $BASH_ENV
      echo "export CIRCLE_PR_BASE_SHA=`curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.base.sha'`" >> $BASH_ENV
      echo 'export AFFECTED_ARGS="--base ${CIRCLE_PR_BASE_SHA}"' >> $BASH_ENV
    else
      echo 'Fetching Base Commit from Deploy Cache'
      if [[ ! -f dist/last-deploy.txt ]]
      then
        mkdir dist && git rev-parse HEAD~1 > dist/last-deploy.txt
      fi
      echo 'export AFFECTED_ARGS="--base $(cat dist/last-deploy.txt)"' >> $BASH_ENV
    fi
    source $BASH_ENV
    echo $AFFECTED_ARGS

yarn_cache: &yarn_cache
  keys:
    - node-deps-node12-{{ checksum "yarn.lock" }}
    # fallback to using the latest cache if no exact match is found
    - node-deps-node12-

deploy_cache: &deploy_cache
  key: last-deploy-sha

yarn_install: &yarn_install
  name: Install Dependencies
  command: yarn install --frozen-lockfile --non-interactive

jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *yarn_cache
      - run:
          <<: *yarn_install
      - save_cache:
          key: node-deps-node12-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
            - node_modules
  assemble-custom:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn format:check ${AFFECTED_ARGS}
  sonar-evron:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: ./node_modules/.bin/nx workspace-lint
      - run: yarn affected:lint ${AFFECTED_ARGS} --parallel
  setup-cloud:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:build -- ${AFFECTED_ARGS} --parallel --configuration production
      - save_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - dist
      - store_artifacts:
          path: dist
  test-custom:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:test -- ${AFFECTED_ARGS} --parallel -- --ci --code-coverage
  e2e-test-chrome:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:e2e -- ${AFFECTED_ARGS} --configuration production -- --headless
      - store_artifacts:
          path: dist/cypress

  deploy-production-custom:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: yarn affected -- --target deploy ${AFFECTED_ARGS}
      - run: git rev-parse HEAD > dist/last-deploy.txt
      - save_cache:
          key: last-deploy-sha
          paths:
            - dist/last-deploy.txt

workflows:
  version: 2
#  pr_check:
#    jobs:
#      - install
#      - check-formatting:
#          requires:
#            - install
#      - lint:
#          requires:
#            - install
#      - test:
#          requires:
#            - install
#      - build:
#          requires:
#            - install
#      - e2e:
#          requires:
#            - install
#      - deploy:
#          filters:
#            branches:
#              only:
#                - master
#          requires:
#            - check-formatting
#            - lint
#            - test
#            - build
#            - e2e

  dataflow:
#    when: << pipeline.parameters.dataflow >>
    jobs:
      - install
      - assemble-custom:
          build_directory: ..
#          command: echo "Hello World 1!"
#          name: assemble
          requires: ['install']
          root_directory: .
          service: dataflow
          working_directory: .
      - test-custom:
 #         command: dataflow:test
 #         name: test
          requires: ['install']
          root_directory: .
 #         service: dataflow
          working_directory: .
      - sonar-everon:
 #         name: sonar
 #         command: echo "sonar-evron step"
          requires: ['install']
      - setup-cloud:
          requires: ['install']
 #         project: test
      - use-adhoc:
          type: approval
          filters:
            branches:
              ignore: ['master']
          requires: ['assemble-custom']
      - deploy-all-services:
          name: deploy
          command: echo "deploy-all-services step"
          requires: ['setup-cloud']
      - deploy-ui:
 #         host: test.everon.io
          name: deploy-ui
          command: echo "deploy-ui step"
 #         project: everon-test
          requires:
            - setup-cloud
      - elastic-indexes:
          name: elastic-indexes
          command: echo "elastic-indexes-test"
          requires: ['deploy-ui']
 #         host: test.everon.io
      - elastic-indexes2:
          adhoc: false
 #         host: staging.everon.io
          command: echo "elastic-indexes-test2" 
          name: elastic-indexes-staging
 #         requires: ['deploy-staging-dataflow']
 #     - queue:
 #         requires: ['test']
      - deploy-staging-custom:
          name: deploy-staging-dataflow
          filters:
            branches:
              only: ['master']
 #         requires: ['queue']
 #         service: dataflow
          command: echo "deploy-staging-custom step" 
          root_directory: .
          working_directory: .
#      - deploy-production-custom:
#          name: deploy-production-dataflow
#          filters:
#            branches:
#              only: ['master']
#          requires:
#      - e2e-ff-comets
#      - e2e-cr-comets
      - integration-staging
#          service: dataflow
          name: integration-staging
          command: echo "integration-staging command"
          root_directory: .
          working_directory: .
      - # Adhoc e2e tests
#        create-identity-provider-environment:
#          name: create-identity-provider-environment
#          requires: ['deploy']
      - e2e-test-chrome:
#          host: test.everon.io
#          name: e2e-comets-cr
          requires: ['install']
#          suite: comets
#      - e2e-test-firefox:
#          host: test.everon.io
#          name: e2e-comets-ff
#          requires: ['create-identity-provider-environment', 'elastic-indexes-test']
#          suite: comets
      - integration-test:
          name: integration-test
          command: echo "integration-test step"
 #         host: test.everon.io
 #         requires: ['create-identity-provider-environment', 'elastic-indexes-test']
 #     - e2e-test-firefox:
 #         host: staging.everon.io
 #         name: e2e-ff-comets
 #         requires: ['elastic-indexes-staging']
 #         suite: comets
 #         filters:
 #           branches:
 #             only: ['master']
 #     - e2e-test-chrome:
 #         host: staging.everon.io
 #         name: e2e-cr-comets
 #         requires: ['elastic-indexes-staging']
 #         suite: comets
 #         filters:
 #           branches:
 #             only: ['master']
      - deploy-production-custom:
  #        name: integration-staging
  #        host: staging.everon.io
          requires: 
            - assemble-custom
            - sonar-everon
            - test-custom
            - setup-cloud
            - e2e-test-chrome
          filters:
            branches:
              only: ['master']
